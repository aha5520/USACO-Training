/*
ID: david.d9
LANG: C++11
TASK: castle
*/

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <cmath>
#include <vector>
#include <iomanip>
#include <algorithm>
#include <functional>
#include <queue>
#include <set>
#include <stack>
#include <map>
#include <list>
#include <deque>
#include <unordered_map>
#include <unordered_set>
#include <assert.h>
#include <bitset>

using namespace std;

#define f first 
#define s second
#define pb push_back
#define mp make_pair
#define lb lower_bound
#define ub upper_bound
#define sq(a) (a)*(a)

#define FOR(i, a, b) for (int i=(a); i<(b); i++)
#define F0R(i, a) for (int i=0; i<(a); i++)
#define FORd(i,a,b) for (int i = (b)-1; i >= (a); i--)
#define F0Rd(i,a) for (int i = (a)-1; i >= 0; i--)

#define FAST ios::sync_with_stdio(0); cin.tie(0)

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef vector<int> vi;
typedef vector<vector<int>> vvi;
typedef pair<int, int> pi;
typedef vector<pi> vpi;

int m, n;
int changeX[4] = { -1, 1, 0, 0 };
int changeY[4] = { 0, 0, -1, 1 };
int direc[4] = { 3, 1, 4, 2 };
int curCount;
int allWall[50][50];
int cast[50][50];

void floodFill(int grid[50][50], int x, int y, int num) {
	F0R(i, 4) {
		int newX = x + changeX[i];
		int newY = y + changeY[i];
		if (newX >= 0 && newY >= 0 && newX < n && newY < m && grid[newX][newY] == 0 && to_string(cast[x][y])[direc[i]] == '0') {
			curCount++;
			grid[newX][newY] = num;
			floodFill(grid, newX, newY, num);
		}
	}
}
int toBinary(int num) {
	if (num >= 8)
		return 1000 + toBinary(num - 8);
	if (num >= 4)
		return 100 + toBinary(num - 4);
	if (num >= 2)
		return 10 + toBinary(num - 2);
	if (num >= 1)
		return 10001;
	return 10000;
}
int main() {
	FAST;
	freopen("castle.in", "r", stdin);
	freopen("castle.out", "w", stdout);
	cin >> m >> n;
	F0R(i, n) {
		F0R(j, m) {
			cin >> cast[i][j];
			cast[i][j] = toBinary(cast[i][j]);
		}
	}
	int noRemMax, curNum = 0;
	F0R(i, n)
		F0R(j, m) {
			if (allWall[i][j] == 0) {
				curNum++;
				allWall[i][j] = curNum;
				curCount = 1;
				floodFill(allWall, i, j, curNum);
				noRemMax = max(curCount, noRemMax);
			}
		}
	int remMax, curRemXMax, curRemYMax = 0;
	char direct;
	F0R(j, m)
		F0Rd(i, n) {
			if (to_string(cast[i][j])[3] == '1') {
				int remWall[50][50];
				F0R(i, n)
					F0R(j, m)
						remWall[i][j] = 0;
				remWall[i][j] = 1;
				curCount = 1;
				floodFill(remWall, i, j, 1);
				if (i - 1 >= 0 && remWall[i - 1][j] == 0) {
					curCount++;
					remWall[i - 1][j] = 1;
					floodFill(remWall, i - 1, j, 1);
				}
				if (curCount > remMax) {
					remMax = curCount;
					curRemXMax = i;
					curRemYMax = j;
				    direct = 'N';
				}
			}
			if (to_string(cast[i][j])[2] == '1') {
				int remWall[50][50];
				F0R(i, n)
					F0R(j, m)
						remWall[i][j] = 0;
				remWall[i][j] = 1;
				curCount = 1;
				floodFill(remWall, i, j, 1);
				if (j+1 < m && remWall[i][j + 1] == 0) {
					curCount++;
					remWall[i][j + 1] = 1;
					floodFill(remWall, i, j + 1, 1);
				}
				if (curCount > remMax) {
					remMax = curCount;
					curRemXMax = i;
					curRemYMax = j;
					direct = 'E';
				}
			}
		}
	cout << curNum << "\n" << noRemMax << "\n" << remMax << "\n" << curRemXMax + 1 << " " << curRemYMax + 1 << " " << direct << "\n";
	return 0;
}
